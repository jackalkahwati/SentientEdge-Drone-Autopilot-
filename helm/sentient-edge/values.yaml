# Default values for sentient-edge
# This is a YAML-formatted file

global:
  imageRegistry: "registry.sentientedge.military"
  imagePullSecrets:
    - name: registry-secret
  storageClass: "fast-ssd"
  postgresql:
    auth:
      postgresPassword: "SecurePostgres123!@#"
      username: "sentient_admin"
      password: "SecurePostgres123!@#"
      database: "sentient_edge"

# Environment Configuration
environment: "development"
namespace: "sentient-edge"

# Image Configuration
image:
  registry: "registry.sentientedge.military"
  pullPolicy: IfNotPresent
  pullSecrets: 
    - registry-secret

# Frontend Configuration
frontend:
  enabled: true
  replicaCount: 3
  image:
    repository: sentient-edge/frontend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

# Backend Configuration
backend:
  enabled: true
  replicaCount: 3
  image:
    repository: sentient-edge/backend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 4000
    targetPort: 4000
  
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

# Database Configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "SecurePostgres123!@#"
    username: "sentient_admin"
    password: "SecurePostgres123!@#"
    database: "sentient_edge"
  
  primary:
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi
    
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 100Gi
    
    configuration: |
      # PostgreSQL configuration for military-grade security
      ssl = on
      max_connections = 200
      shared_buffers = 512MB
      effective_cache_size = 2GB
      maintenance_work_mem = 128MB
      checkpoint_completion_target = 0.7
      wal_buffers = 32MB
      default_statistics_target = 100
      random_page_cost = 1.1
      effective_io_concurrency = 200
      work_mem = 8MB
      min_wal_size = 2GB
      max_wal_size = 8GB
      log_statement = all
      log_min_duration_statement = 100
      log_checkpoints = on
      log_connections = on
      log_disconnections = on
      log_lock_waits = on
      log_temp_files = 0

# Redis Configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "RedisPassword123!"
  
  master:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 10Gi

# NGINX Reverse Proxy Configuration
nginx:
  enabled: true
  replicaCount: 2
  image:
    repository: nginx
    tag: "1.25-alpine"
    pullPolicy: IfNotPresent
  
  service:
    type: LoadBalancer
    httpsPort: 443
    httpPort: 80
  
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 250m
      memory: 128Mi

# Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: sentientedge.military
      paths:
        - path: /
          pathType: Prefix
          service: frontend
    - host: api.sentientedge.military
      paths:
        - path: /api
          pathType: Prefix
          service: backend
        - path: /ws
          pathType: Prefix
          service: backend
  tls:
    - secretName: sentient-edge-tls
      hosts:
        - sentientedge.military
        - api.sentientedge.military

# Security Configuration
security:
  podSecurityPolicy:
    enabled: true
  networkPolicy:
    enabled: true
  seccomp:
    enabled: true
    profile: runtime/default

# Monitoring Configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
    scrapeInterval: 15s
  grafana:
    enabled: true
    adminPassword: "GrafanaAdminPass"
  
  serviceMonitor:
    enabled: true
    interval: 15s
    path: /metrics

# Secrets Configuration
secrets:
  postgresql:
    password: "SecurePostgres123!@#"
  redis:
    password: "RedisPassword123!"
  jwt:
    secret: "super-secure-jwt-secret-1234567890"
    refreshSecret: "refresh-jwt-secret-abcdefghijklmnop"
  encryption:
    key: "aes-256-gcm-key-for-encryption-123456"

# ConfigMap Data
config:
  nodeEnv: "production"
  logLevel: "info"
  useHttps: "true"
  rateLimit:
    max: 1000
    window: 900000
  security:
    level: "maximum"
    mfaRequired: "true"
    auditLevel: "full"

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# RBAC
rbac:
  create: true

# Volume Mounts
volumeMounts: []

# Volumes  
volumes: []

# Node Selection
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity Rules
affinity: {}

# Environment-specific overrides
environments:
  development:
    replicaCount: 1
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  
  staging:
    replicaCount: 2
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
  
  production:
    replicaCount: 5
    resources:
      limits:
        cpu: 2000m
        memory: 2Gi
      requests:
        cpu: 1000m
        memory: 1Gi