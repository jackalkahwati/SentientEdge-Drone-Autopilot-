# NGINX WebSocket Load Balancer Configuration
# Military-grade drone operations with sticky sessions and failover

# Define upstream server pool for WebSocket connections
upstream websocket_backend {
    # Consistent hashing for sticky sessions based on client IP and session
    hash $remote_addr$http_x_session_id consistent;
    
    # Server pool - add/remove servers as needed for horizontal scaling
    server 127.0.0.1:4000 weight=1 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:4001 weight=1 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:4002 weight=1 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:4003 weight=1 max_fails=3 fail_timeout=30s;
    
    # Backup servers for high availability
    server 127.0.0.1:4010 backup weight=1;
    server 127.0.0.1:4011 backup weight=1;
    
    # Health check settings
    keepalive 32;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

# Rate limiting zones for DDoS protection
limit_req_zone $binary_remote_addr zone=ws_connections:10m rate=100r/m;
limit_req_zone $http_x_forwarded_for zone=ws_global:10m rate=1000r/m;
limit_conn_zone $binary_remote_addr zone=ws_conn_per_ip:10m;

# WebSocket connection mapping
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Map for sticky session handling
map $http_cookie $session_id {
    default "";
    "~*ws-session-id=(?<captured_session_id>[^;]+)" $captured_session_id;
}

# Geo-based routing for latency optimization
geo $geo_zone {
    default us-east;
    10.0.0.0/8 internal;
    172.16.0.0/12 internal;
    192.168.0.0/16 internal;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name sentientedge.local *.sentientedge.local;
    
    # SSL/TLS Configuration - Military-grade encryption
    ssl_certificate /etc/nginx/ssl/sentientedge.crt;
    ssl_certificate_key /etc/nginx/ssl/sentientedge.key;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # HSTS for security
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Rate limiting
    limit_req zone=ws_connections burst=50 nodelay;
    limit_req zone=ws_global burst=200 nodelay;
    limit_conn ws_conn_per_ip 20;
    
    # Client configuration for WebSocket
    client_max_body_size 10M;
    proxy_read_timeout 3600s;
    proxy_send_timeout 3600s;
    
    # WebSocket endpoint
    location /ws {
        # WebSocket upgrade headers
        proxy_pass http://websocket_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Preserve client information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Session affinity headers
        proxy_set_header X-Session-ID $session_id;
        proxy_set_header X-Client-IP $remote_addr;
        proxy_set_header X-Geo-Zone $geo_zone;
        
        # Connection settings for stability
        proxy_connect_timeout 60s;
        proxy_send_timeout 3600s;
        proxy_read_timeout 3600s;
        
        # Buffer settings for high-frequency telemetry
        proxy_buffering off;
        proxy_cache off;
        
        # Connection keep-alive
        proxy_set_header Connection "upgrade";
        
        # Health check bypass
        if ($arg_health_check) {
            return 200 "healthy";
        }
        
        # Access control for drone operations
        access_log /var/log/nginx/websocket_access.log combined;
        error_log /var/log/nginx/websocket_error.log;
    }
    
    # Health check endpoint for load balancer
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Metrics endpoint for monitoring
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
    
    # API proxy for REST endpoints
    location /api/ {
        proxy_pass http://websocket_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API rate limiting
        limit_req zone=ws_global burst=100 nodelay;
        
        # Connection settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Enable caching for GET requests
        proxy_cache_methods GET HEAD;
        proxy_cache_valid 200 302 10s;
        proxy_cache_valid 404 1m;
    }
    
    # Static assets
    location / {
        proxy_pass http://websocket_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Static file caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status "HIT";
        }
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name sentientedge.local *.sentientedge.local;
    
    # Security headers even on redirect
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    
    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

# Monitoring and logging configuration
log_format websocket_log '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         'rt=$request_time uct="$upstream_connect_time" '
                         'uht="$upstream_header_time" urt="$upstream_response_time" '
                         'session="$session_id" geo="$geo_zone"';

# Advanced configuration for high availability
upstream_conf {
    # Health check configuration
    health_check interval=30s fails=3 passes=2 uri=/health;
    
    # Slow start for new servers
    slow_start=30s;
    
    # Connection draining for graceful shutdown
    max_conns=1000;
}

# Rate limiting configuration
limit_req_status 429;
limit_conn_status 429;

# Connection limits per server
worker_connections 4096;
worker_rlimit_nofile 8192;

# Optimize for high-frequency WebSocket traffic
tcp_nopush on;
tcp_nodelay on;
sendfile on;
keepalive_timeout 65;
keepalive_requests 1000;

# Buffer optimization for real-time data
proxy_buffers 16 16k;
proxy_buffer_size 32k;
proxy_busy_buffers_size 64k;

# Error handling
error_page 502 503 504 /50x.html;
location = /50x.html {
    root /usr/share/nginx/html;
}