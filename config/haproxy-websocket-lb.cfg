# HAProxy Configuration for WebSocket Load Balancing
# Military-grade drone operations with advanced health checking and failover

global
    # Process management
    daemon
    master-worker
    
    # Security
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # SSL/TLS Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 16384
    tune.h2.initial-window-size 65536
    
    # Logging
    log stdout local0 info
    
    # Maximum connections
    maxconn 40000
    
    # Process limits
    nbproc 1
    nbthread 4

defaults
    mode http
    
    # Timeouts optimized for WebSocket
    timeout connect 30s
    timeout client 3600s
    timeout server 3600s
    timeout tunnel 3600s
    timeout http-keep-alive 10s
    timeout http-request 30s
    timeout queue 30s
    
    # Retry configuration
    retries 3
    option redispatch
    
    # Connection management
    option httplog
    option dontlognull
    option log-health-checks
    option contstats
    
    # Performance
    option splice-auto
    option splice-request
    option splice-response
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend for HTTPS WebSocket connections
frontend websocket_frontend
    bind *:443 ssl crt /etc/ssl/certs/sentientedge.pem alpn h2,http/1.1
    bind *:80
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    
    # Rate limiting using stick tables
    stick-table type ip size 100k expire 30s store http_req_rate(10s),conn_cur,sess_rate(10s)
    
    # Rate limit: 100 requests per 10 seconds per IP
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    http-request deny if { sc_conn_cur(0) gt 20 }
    
    # Connection limits per source IP
    tcp-request connection track-sc1 src
    tcp-request connection reject if { sc_conn_cur(1) gt 50 }
    
    # WebSocket detection
    acl is_websocket hdr(Upgrade) -i websocket
    acl websocket_path path_beg /ws
    
    # Health check endpoints
    acl health_check path_beg /health
    acl stats_check path_beg /haproxy_stats
    
    # API endpoints
    acl api_path path_beg /api/
    
    # Routing decisions
    use_backend websocket_backend if is_websocket websocket_path
    use_backend health_backend if health_check
    use_backend stats_backend if stats_check
    use_backend api_backend if api_path
    use_backend web_backend
    
    # Logging with detailed WebSocket information
    capture request header User-Agent len 64
    capture request header X-Forwarded-For len 32
    capture request header Sec-WebSocket-Key len 32
    capture request header Sec-WebSocket-Protocol len 32

# Backend for WebSocket connections with sticky sessions
backend websocket_backend
    # Load balancing algorithm for sticky sessions
    balance source
    hash-type consistent
    
    # Enable connection persistence
    option tcp-check
    option log-health-checks
    
    # Advanced health checking
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost\r\nConnection:\ close
    http-check expect status 200
    
    # Server pool with weights and health monitoring
    server ws01 127.0.0.1:4000 weight 100 check inter 10s rise 2 fall 3 maxconn 2500
    server ws02 127.0.0.1:4001 weight 100 check inter 10s rise 2 fall 3 maxconn 2500
    server ws03 127.0.0.1:4002 weight 100 check inter 10s rise 2 fall 3 maxconn 2500
    server ws04 127.0.0.1:4003 weight 100 check inter 10s rise 2 fall 3 maxconn 2500
    
    # Backup servers for high availability
    server ws-backup01 127.0.0.1:4010 weight 50 check inter 30s rise 2 fall 3 backup maxconn 1000
    server ws-backup02 127.0.0.1:4011 weight 50 check inter 30s rise 2 fall 3 backup maxconn 1000
    
    # Connection settings for WebSocket
    timeout server 3600s
    timeout connect 30s
    
    # Stick table for session persistence
    stick-table type string len 32 size 100k expire 1h store server_id,conn_cnt
    stick on cookie(ws-session-id)
    stick on hdr(X-Session-ID)
    
    # Connection draining for graceful shutdown
    option persist
    
    # Custom headers for backend servers
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
    http-request add-header X-Real-IP %[src]
    http-request add-header X-Forwarded-Port %[dst_port]
    
    # WebSocket-specific headers
    http-request set-header X-WebSocket-Client %[src]:%[src_port]
    http-request set-header X-Load-Balancer haproxy

# Backend for API endpoints
backend api_backend
    balance roundrobin
    
    # Health checking for API
    option httpchk GET /api/health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # API servers
    server api01 127.0.0.1:4000 weight 100 check inter 5s rise 2 fall 2 maxconn 1000
    server api02 127.0.0.1:4001 weight 100 check inter 5s rise 2 fall 2 maxconn 1000
    server api03 127.0.0.1:4002 weight 100 check inter 5s rise 2 fall 2 maxconn 1000
    server api04 127.0.0.1:4003 weight 100 check inter 5s rise 2 fall 2 maxconn 1000
    
    # API-specific timeouts
    timeout server 30s
    timeout connect 10s
    
    # Connection pooling
    http-reuse safe
    
    # Compression for API responses
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json

# Backend for web application
backend web_backend
    balance leastconn
    
    # Health checking
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Web servers
    server web01 127.0.0.1:4000 weight 100 check inter 10s rise 2 fall 2 maxconn 500
    server web02 127.0.0.1:4001 weight 100 check inter 10s rise 2 fall 2 maxconn 500
    server web03 127.0.0.1:4002 weight 100 check inter 10s rise 2 fall 2 maxconn 500
    server web04 127.0.0.1:4003 weight 100 check inter 10s rise 2 fall 2 maxconn 500
    
    # Static content caching
    http-request cache-use web-cache
    http-response cache-store web-cache
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript

# Health check backend
backend health_backend
    http-request return status 200 content-type text/plain lf-string "HAProxy healthy\n"

# Statistics backend
backend stats_backend
    stats enable
    stats uri /haproxy_stats
    stats refresh 30s
    stats show-legends
    stats show-node
    stats admin if TRUE
    
    # Authentication (configure as needed)
    # stats auth admin:secure_password_here
    
    # IP restrictions
    acl stats_allow src 127.0.0.1 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
    http-request deny if !stats_allow

# Cache configuration for static content
cache web-cache
    total-max-size 256
    max-object-size 10240
    max-age 300

# Monitoring and observability
listen stats
    bind *:8404
    http-request use-service prometheus-exporter if { path /metrics }
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if LOCALHOST
    
    # Prometheus metrics
    option httplog
    
    # IP restrictions for monitoring
    acl LOCALHOST src 127.0.0.1/8 ::1
    acl MONITORING_NETWORK src 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
    http-request deny if !LOCALHOST !MONITORING_NETWORK

# Resolvers for service discovery
resolvers docker-resolver
    nameserver dns1 127.0.0.11:53
    resolve_retries 3
    timeout resolve 1s
    timeout retry 1s
    hold other 30s
    hold refused 30s
    hold nx 30s
    hold timeout 30s
    hold valid 10s
    hold obsolete 30s

# Error handling and maintenance pages
backend maintenance_backend
    http-request return status 503 content-type text/html lf-file /etc/haproxy/maintenance.html

# Global error handling
errorfiles custom-errors
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Advanced logging configuration
log-tag sentientedge-haproxy

# Performance monitoring
userlist monitoring
    user prometheus password $6$rounds=10000$salt$hash
    
# Rate limiting configuration
http-errors custom-errors
    errorfile 429 /etc/haproxy/errors/429.http

# Connection tracking for DDoS protection
frontend ddos_protection
    # Global connection limits
    tcp-request connection track-sc0 src table global_connections
    tcp-request connection reject if { sc_conn_cur(0) gt 100 }
    tcp-request connection reject if { sc_conn_rate(0) gt 20 }

backend global_connections
    stick-table type ip size 1m expire 10m store conn_cnt,conn_rate(60s),http_req_rate(60s)