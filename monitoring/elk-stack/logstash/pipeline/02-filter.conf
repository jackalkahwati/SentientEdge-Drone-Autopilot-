# Logstash Filter Configuration for SentientEdge
# Advanced log processing, enrichment, and classification

filter {
  # Parse timestamp and ensure consistent format
  if [@timestamp] {
    date {
      match => [ "@timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }

  # Add host information if not present
  if ![host] {
    mutate {
      add_field => { "host" => "%{[agent][hostname]}" }
    }
  }

  # Classification and enrichment based on log category
  if [category] {
    # Security log processing
    if [category] == "SECURITY" {
      mutate {
        add_tag => ["security", "classified"]
        add_field => { "log_type" => "security" }
      }
      
      # Enrich with threat intelligence
      if [metadata][threat_indicators] {
        mutate {
          add_tag => ["threat_detected"]
        }
      }
    }

    # Drone telemetry processing
    if [category] == "DRONE_TELEMETRY" {
      mutate {
        add_tag => ["telemetry", "operational"]
        add_field => { "log_type" => "telemetry" }
      }
      
      # Extract GPS coordinates for geospatial analysis
      if [metadata][telemetry][latitude] and [metadata][telemetry][longitude] {
        mutate {
          add_field => { 
            "[location][lat]" => "%{[metadata][telemetry][latitude]}"
            "[location][lon]" => "%{[metadata][telemetry][longitude]}"
          }
        }
      }
      
      # Calculate flight time if drone is armed
      if [metadata][telemetry][armed] == true {
        mutate {
          add_tag => ["flight_active"]
        }
      }
    }

    # Mission log processing
    if [category] == "MISSION" {
      mutate {
        add_tag => ["mission", "operational"]
        add_field => { "log_type" => "mission" }
      }
      
      # Track mission status changes
      if [metadata][status] {
        mutate {
          add_field => { "mission_status" => "%{[metadata][status]}" }
        }
      }
    }

    # API request processing
    if [category] == "API" {
      mutate {
        add_tag => ["api", "access"]
        add_field => { "log_type" => "api" }
      }
      
      # Calculate response time categories
      if [duration] {
        if [duration] > 5000 {
          mutate { add_tag => ["slow_response"] }
        } else if [duration] > 1000 {
          mutate { add_tag => ["medium_response"] }
        } else {
          mutate { add_tag => ["fast_response"] }
        }
      }
      
      # Tag error responses
      if [metadata][statusCode] {
        if [metadata][statusCode] >= 500 {
          mutate { add_tag => ["server_error"] }
        } else if [metadata][statusCode] >= 400 {
          mutate { add_tag => ["client_error"] }
        } else if [metadata][statusCode] >= 200 and [metadata][statusCode] < 300 {
          mutate { add_tag => ["success"] }
        }
      }
    }

    # Audit log processing
    if [category] == "AUDIT" {
      mutate {
        add_tag => ["audit", "compliance"]
        add_field => { "log_type" => "audit" }
      }
      
      # Ensure all audit logs have required fields
      if ![userId] {
        mutate { add_tag => ["audit_incomplete"] }
      }
    }

    # Performance monitoring
    if [category] == "PERFORMANCE" {
      mutate {
        add_tag => ["performance", "monitoring"]
        add_field => { "log_type" => "performance" }
      }
    }

    # Anomaly detection
    if [category] == "ANOMALY" {
      mutate {
        add_tag => ["anomaly", "alert"]
        add_field => { "log_type" => "anomaly" }
      }
      
      # Set alert priority based on severity
      if [metadata][severity] == "critical" {
        mutate { add_tag => ["high_priority"] }
      } else if [metadata][severity] == "high" {
        mutate { add_tag => ["medium_priority"] }
      }
    }

    # Network monitoring
    if [category] == "NETWORK" {
      mutate {
        add_tag => ["network", "infrastructure"]
        add_field => { "log_type" => "network" }
      }
    }

    # Communication protocol logs
    if [category] == "MAVLINK" or [category] == "CYPHAL" {
      mutate {
        add_tag => ["protocol", "communication"]
        add_field => { "log_type" => "protocol" }
      }
    }
  }

  # Error processing and classification
  if [error] {
    mutate {
      add_tag => ["error"]
    }
    
    # Extract error details if it's a structured error
    if [error][message] {
      mutate {
        add_field => { "error_message" => "%{[error][message]}" }
      }
    }
    
    if [error][stack] {
      mutate {
        add_field => { "error_stack" => "%{[error][stack]}" }
      }
    }
  }

  # User context enrichment
  if [userId] and [username] {
    mutate {
      add_field => { "user_context" => "%{username} (%{userId})" }
    }
  }

  # Geographic enrichment for IP addresses
  if [ipAddress] {
    geoip {
      source => "ipAddress"
      target => "geoip"
    }
  }

  # Add processing timestamp
  mutate {
    add_field => { "processed_at" => "%{+YYYY-MM-dd HH:mm:ss.SSS}" }
  }

  # Security classification handling
  if [classification] {
    if [classification] == "SECRET" or [classification] == "TOP_SECRET" {
      mutate {
        add_tag => ["classified", "restricted"]
      }
    }
  }

  # Clean up temporary fields
  mutate {
    remove_field => [ "agent", "ecs", "input", "log" ]
  }
}