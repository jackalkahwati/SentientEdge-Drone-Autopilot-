# Prometheus Configuration for SentientEdge Drone Platform
# Military-grade metrics collection and monitoring

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'sentient-edge'
    environment: 'production'
    classification: 'military'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Rules files for alerting and recording
rule_files:
  - "rules/*.yml"

# Scrape configurations
scrape_configs:
  # SentientEdge Main Application
  - job_name: 'sentient-edge-app'
    scrape_interval: 10s
    metrics_path: /metrics
    static_configs:
      - targets: ['host.docker.internal:4000']
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: host.docker.internal:4000

  # SentientEdge Next.js Frontend
  - job_name: 'sentient-edge-frontend'
    scrape_interval: 15s
    metrics_path: /api/metrics
    static_configs:
      - targets: ['host.docker.internal:3000']
    scrape_timeout: 10s

  # Prometheus itself
  - job_name: 'prometheus'
    scrape_interval: 30s
    static_configs:
      - targets: ['localhost:9090']

  # Node Exporter for system metrics
  - job_name: 'node-exporter'
    scrape_interval: 15s
    static_configs:
      - targets: ['node-exporter:9100']
    relabel_configs:
      - source_labels: [__address__]
        regex: '([^:]+)(?::\d+)?'
        target_label: instance
        replacement: '${1}'

  # PostgreSQL Exporter
  - job_name: 'postgres-exporter'
    scrape_interval: 15s
    static_configs:
      - targets: ['postgres-exporter:9187']

  # Redis Exporter
  - job_name: 'redis-exporter'
    scrape_interval: 15s
    static_configs:
      - targets: ['redis-exporter:9121']

  # Nginx Exporter (if using nginx)
  - job_name: 'nginx-exporter'
    scrape_interval: 15s
    static_configs:
      - targets: ['nginx-exporter:9113']

  # Blackbox Exporter for endpoint monitoring
  - job_name: 'blackbox-http'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
        - https://localhost:4000/api/health
        - https://localhost:3000/api/health
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115

  # Docker container metrics
  - job_name: 'docker'
    scrape_interval: 15s
    static_configs:
      - targets: ['cadvisor:8080']

  # Kubernetes monitoring (if deployed on K8s)
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
      - role: endpoints
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  - job_name: 'kubernetes-nodes'
    kubernetes_sd_configs:
      - role: node
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)

  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  # Custom drone telemetry endpoints
  - job_name: 'drone-telemetry'
    scrape_interval: 5s
    metrics_path: /metrics/telemetry
    static_configs:
      - targets: ['host.docker.internal:4000']
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'sentient_drone_.*'
        action: keep

  # Security monitoring endpoints
  - job_name: 'security-metrics'
    scrape_interval: 10s
    metrics_path: /metrics/security
    static_configs:
      - targets: ['host.docker.internal:4000']
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'sentient_security_.*|sentient_authentication_.*|sentient_threats_.*'
        action: keep

  # Mission monitoring
  - job_name: 'mission-metrics'
    scrape_interval: 30s
    metrics_path: /metrics/missions
    static_configs:
      - targets: ['host.docker.internal:4000']
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'sentient_mission_.*'
        action: keep

# Storage configuration
storage:
  tsdb:
    path: /prometheus
    retention.time: 90d
    retention.size: 50GB
    wal-compression: true

# Remote write configuration (for long-term storage)
# remote_write:
#   - url: "https://your-long-term-storage/api/v1/write"
#     basic_auth:
#       username: "username"
#       password: "password"

# Remote read configuration
# remote_read:
#   - url: "https://your-long-term-storage/api/v1/read"
#     basic_auth:
#       username: "username"
#       password: "password"