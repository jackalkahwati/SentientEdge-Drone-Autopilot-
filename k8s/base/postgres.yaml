apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: sentient-edge
  labels:
    app: sentient-edge
    component: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: sentient-edge
  labels:
    app: sentient-edge
    component: postgres
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: sentient-edge
      component: postgres
  template:
    metadata:
      labels:
        app: sentient-edge
        component: postgres
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:16-alpine
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: sentient-edge-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: sentient-edge-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sentient-edge-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
        - name: POSTGRES_SSL_MODE
          value: "require"
        ports:
        - containerPort: 5432
          name: postgres
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: ssl-certs
          mountPath: /var/lib/postgresql/ssl
          readOnly: true
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        args:
          - postgres
          - -c
          - ssl=on
          - -c
          - ssl_cert_file=/var/lib/postgresql/ssl/tls.crt
          - -c
          - ssl_key_file=/var/lib/postgresql/ssl/tls.key
          - -c
          - ssl_ca_file=/var/lib/postgresql/ssl/ca.crt
          - -c
          - max_connections=200
          - -c
          - shared_buffers=512MB
          - -c
          - effective_cache_size=2GB
          - -c
          - maintenance_work_mem=128MB
          - -c
          - checkpoint_completion_target=0.7
          - -c
          - wal_buffers=32MB
          - -c
          - default_statistics_target=100
          - -c
          - random_page_cost=1.1
          - -c
          - effective_io_concurrency=200
          - -c
          - work_mem=8MB
          - -c
          - min_wal_size=2GB
          - -c
          - max_wal_size=8GB
          - -c
          - log_statement=all
          - -c
          - log_min_duration_statement=100
          - -c
          - log_checkpoints=on
          - -c
          - log_connections=on
          - -c
          - log_disconnections=on
          - -c
          - log_lock_waits=on
          - -c
          - log_temp_files=0
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=require"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: sentient-edge-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sentient-edge-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: sentient-edge-config
              key: POSTGRES_DB
        ports:
        - containerPort: 9187
          name: metrics
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: ssl-certs
        secret:
          secretName: ssl-certificates
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: sentient-edge
  labels:
    app: sentient-edge
    component: postgres
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  selector:
    app: sentient-edge
    component: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
  - name: metrics
    port: 9187
    targetPort: 9187
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: sentient-edge
  labels:
    app: sentient-edge
    component: postgres
data:
  01_init_database.sql: |
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS drone_data;
    CREATE SCHEMA IF NOT EXISTS mission_data;
    CREATE SCHEMA IF NOT EXISTS audit_logs;
    
    -- Set default search path
    ALTER DATABASE sentient_edge SET search_path = public, drone_data, mission_data, audit_logs;